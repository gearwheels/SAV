%u[x_, y_, z_] :=-x^2 + 2*x*y - 9*y^2 + 6*x*z + 18*y*z - 11*z^2 + 1;%u[x, y, z] // TraditionalForm%A = {%    {-1, 1,3},%    {1,-9,9},%    {3,9,-11}   %};%B = {{0}, {0}, {0}};%a0 = 1;[x, y, z] = ndgrid(-10:0.1:10, -10:0.1:10, -10:0.1:10);u = -x.^2 + 2*x.*y - 9*y.^2 + 6*x.*z + 18*y.*z - 11*z.^2 + 1;%isosurface(u, 0);A = [    -1, 1,3;    1,-9,9;    3,9,-11];B = [0, 0, 0];a0 = 1;[vecs, val] = eig(A)% Получаем характеристический многочленcharPoly = poly(A);disp("Характеристический многочлен:");polyout(charPoly, 'l');eigenvalues = sort(roots(charPoly));disp("Собственные значения:");disp(eigenvalues)[eigenvectors, val] = eig(A);% Срезv1 = eigenvectors(:,1);v2 = eigenvectors(:,2);v3 = eigenvectors(:,3);% Нормируем векторыnormv1 = v1 / sqrt(dot(v1, v1));normv2 = v2 / sqrt(dot(v2, v2));normv3 = v3 / sqrt(dot(v3, v3));S = [normv1, normv2, normv3];disp("Матрица перехода:")disp(S)% Получаем диаганальную матрицуdA = transpose(S)*A*S;disp("Полученная диагональная матрица:")disp(dA)v = dA(1,1) * x.^2 + dA(2,2) * y.^2 + dA(3,3) * z.^2 + a0;isosurface(u, 0);figure;isosurface(v, 0);